class posteres:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.connected = False # initialize the connected attribute to False
        # rest of the code for initializing the object goes here

    def raw_sql(self, sql):
        self.logger.debug("class posteres.database")
        if self.connected:
            self.logger.debug("db connected")
        else:
            self.logger.error("class posteres.database.connected=None")
            raise LambdaException({"Error": True, 'msg': "class posteres.database, connected=None"}) 
        data = self.sql_clearcache(sql) 
        self.commit () 
        self.logger.debug(f"Executed SQL query: {sql}")
        return f"SQL query executed successfully, query: {sql}, records fetched: {data}"
    
    def sql_clearcache(self, command, maxRecords=5000):
        self.logger.debug(f"SQL={command}")
        self.cursor.execute(command)
        if re.search("select", command, re.IGNORECASE):
            return self.cursor.fetchmany(maxRecords)
        else:
            return []
